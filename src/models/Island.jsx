/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: ronildo.facanha (https://sketchfab.com/ronildo.facanha)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/explore-the-magical-island-in-low-poly-3d-7487438f524e4e54959a6fea19751491
Title: Explore the Magical Island in Low Poly 3D
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'

import islandScene from '../assets/3d/island.glb';
import {a} from '@react-spring/three'

const Island = ({isRotating, setIsRotating,...props}) => {
  const islandRef = useRef();

  const {gl, viewport} = useThree()
  const { nodes, materials } = useGLTF(islandScene); 
  console.log(nodes, materials);

  const lastX = useRef(0)
  const rotationSpeed = useRef(0)
  const dampingFactor = 0.95

  const handlePointerDown = (e) =>{
    e.stopPropagation();
    e.preventDefault()
    setIsRotating(true);

    const clientX  = e.touches ? e.touches[0].clientX : e.clientX
    lastX.current = clientX
  }
  const handlePointerUp = (e) =>{
    e.stopPropagation();
    e.preventDefault()
    setIsRotating(false);
  }
  const handlePointerMove = (e) =>{
    e.stopPropagation();
    e.preventDefault()

    if(isRotating) {
      const clientX  = e.touches ? e.touches[0].clientX : e.clientX
    const delta = (clientX - lastX.current) / viewport.width

    islandRef.current.rotation.y+=delta * 0.01* Math.PI

    lastX.current= clientX
    rotationSpeed.current = delta*0.01*Math.pi
  }
  }

  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };
  
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = islandRef.current.rotation.y;
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  useEffect(()=>{
    const canvas = gl.domElement
    canvas.addEventListener('pointerdown', handlePointerDown)
    canvas.addEventListener('pointerup',handlePointerUp)
    canvas.addEventListener('pointermove',handlePointerMove)
    document.addEventListener('keydown',handleKeyDown)
    document.addEventListener('keyup',handleKeyUp)
    return ()=> {
      canvas.removeEventListener('pointerdown', handlePointerDown)
      canvas.removeEventListener('pointerup',handlePointerUp)
      canvas.removeEventListener('pointermove',handlePointerMove)
      document.removeEventListener('keydown',handleKeyDown)
      document.removeEventListener('keyup',handleKeyUp)
    }
  },[gl,handlePointerDown,handlePointerMove,handlePointerUp])
  return (
    <a.group ref={islandRef} {...props}>
<mesh
        castShadow
        receiveShadow
        geometry={nodes.Casa001.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Madeiras.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Madeiras001.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Madeiras002.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_2006.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_2007.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_2008.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Tijolos.geometry}
        material={materials['Concreto Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1009.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1010.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Madeiras003.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Tijolos001.geometry}
        material={materials['Concreto Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1011.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1012.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1013.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1014.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1015.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1016.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1017.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1018.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1019.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1020.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Arvore_1021.geometry}
        material={materials['Grama Light']}
      />
      <mesh castShadow receiveShadow geometry={nodes.Barco.geometry} material={materials.Madeira} />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube048.geometry}
        material={materials['Pano Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube048_1.geometry}
        material={materials.Pano}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube048_2.geometry}
        material={materials.Fundo}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere001.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere001_1.geometry}
        material={materials.Fundo}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere001_2.geometry}
        material={materials.Pano}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere001_3.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_1.geometry}
        material={materials.Fundo}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_2.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_3.geometry}
        material={materials.Vidro}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube006.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube006_1.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube007.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube007_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materials.Concreto}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_1.geometry}
        material={materials.Pano}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_2.geometry}
        material={materials['Concreto Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_3.geometry}
        material={materials['Pano Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_4.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_5.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_6.geometry}
        material={materials.Vidro}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001_7.geometry}
        material={materials.Fundo}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube008.geometry}
        material={materials.Concreto}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube008_1.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube008_2.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube008_3.geometry}
        material={materials.Fundo}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_1.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube009.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube009_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube010.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube010_1.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube011.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube011_1.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube012.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube012_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube013.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube013_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube014.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube014_1.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube018.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube018_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube023.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube023_1.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube024.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube024_1.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube026.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube026_1.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube027.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube027_1.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube028.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube028_1.geometry}
        material={materials.Madeira}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube037.geometry}
        material={materials['Madeira Dark']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube037_1.geometry}
        material={materials['Grama Light']}
      />
      <mesh castShadow receiveShadow geometry={nodes.Cube003.geometry} material={materials.Terra} />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube003_1.geometry}
        material={materials.Grama}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube003_2.geometry}
        material={materials.Areia}
      />
    </a.group>
  )
}

useGLTF.preload('/scene.gltf')

export default Island;
